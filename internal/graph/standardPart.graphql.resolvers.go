package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/Svarcf/sever_go/internal/graph/model"
	"github.com/Svarcf/sever_go/internal/models"
)

// CreateStandardPart is the resolver for the createStandardPart field.
func (r *mutationResolver) CreateStandardPart(ctx context.Context, createStandardPartInput *model.CreateStandardPartInput) (*models.StandardPart, error) {
	panic(fmt.Errorf("not implemented: CreateStandardPart - createStandardPart"))
}

// UpdateStandardPart is the resolver for the updateStandardPart field.
func (r *mutationResolver) UpdateStandardPart(ctx context.Context, updateStandardPartInput *model.UpdateStandardPartInput) (*models.StandardPart, error) {
	panic(fmt.Errorf("not implemented: UpdateStandardPart - updateStandardPart"))
}

// StandardParts is the resolver for the standardParts field.
func (r *queryResolver) StandardParts(ctx context.Context) ([]*models.StandardPart, error) {
	panic(fmt.Errorf("not implemented: StandardParts - standardParts"))
}

// StandardPart is the resolver for the standardPart field.
func (r *queryResolver) StandardPart(ctx context.Context, id uint) (*models.StandardPart, error) {
	panic(fmt.Errorf("not implemented: StandardPart - standardPart"))
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *standardPartResolver) Number(ctx context.Context, obj *models.StandardPart) (*int, error) {
	panic(fmt.Errorf("not implemented: Number - number"))
}
func (r *Resolver) StandardPart() StandardPartResolver { return &standardPartResolver{r} }
type standardPartResolver struct{ *Resolver }
*/
