package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"

	"github.com/Svarcf/sever_go/internal/graph/model"
	"github.com/Svarcf/sever_go/internal/models"
)

// CreateTool is the resolver for the createTool field.
func (r *mutationResolver) CreateTool(ctx context.Context, createToolInput *model.CreateToolInput) (*models.Tool, error) {
	var dimensions, note, toolStroke, workpieceDescription string
	var toolType uint
	if createToolInput.Dimensions != nil {
		dimensions = *createToolInput.Dimensions
	}
	if createToolInput.Note != nil {
		note = *createToolInput.Note
	}
	if createToolInput.ToolStroke != nil {
		toolStroke = *createToolInput.ToolStroke
	}
	if createToolInput.WorkpieceDescription != nil {
		workpieceDescription = *createToolInput.WorkpieceDescription
	}
	if createToolInput.ToolType != nil {
		toolType = *createToolInput.ToolType
	}

	tool := models.NewTool(
		createToolInput.Code,
		createToolInput.Name,
		dimensions,
		note,
		toolStroke,
		workpieceDescription,
		toolType,
		createToolInput.ToolAssociation,
	)
	return r.ToolService.CreateTool(tool)
}

// Tools is the resolver for the tools field.
func (r *queryResolver) Tools(ctx context.Context) ([]*models.Tool, error) {
	return r.ToolService.GetTools()
}

// Tool is the resolver for the tool field.
func (r *queryResolver) Tool(ctx context.Context, code string) (*models.Tool, error) {
	return r.ToolService.GetToolByCode(code)
}

// ToolType is the resolver for the toolType field.
func (r *toolResolver) ToolType(ctx context.Context, obj *models.Tool) (*models.ToolType, error) {
	return r.ToolTypeService.GetToolTypeById(obj.ToolTypeID)
}

// RawMaterials is the resolver for the rawMaterials field.
func (r *toolResolver) RawMaterials(ctx context.Context, obj *models.Tool) ([]*models.RawMaterial, error) {
	return r.ToolService.GetRawMaterials(obj)
}

// StandardParts is the resolver for the standardParts field.
func (r *toolResolver) StandardParts(ctx context.Context, obj *models.Tool) ([]*models.StandardPart, error) {
	return r.ToolService.GetStandardParts(obj)
}

// MechanicalPresses is the resolver for the mechanicalPresses field.
func (r *toolResolver) MechanicalPresses(ctx context.Context, obj *models.Tool) ([]*models.MechanicalPress, error) {
	return r.ToolService.GetMechanicalPresses(obj)
}

// ToolRepairRecords is the resolver for the toolRepairRecords field.
func (r *toolResolver) ToolRepairRecords(ctx context.Context, obj *models.Tool) ([]*models.ToolRepairRecord, error) {
	return r.ToolService.GetToolRepairRecords(obj)
}

// Tool returns ToolResolver implementation.
func (r *Resolver) Tool() ToolResolver { return &toolResolver{r} }

type toolResolver struct{ *Resolver }
