package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.54

import (
	"context"
	"fmt"

	"github.com/Svarcf/sever_go/internal/graph/model"
	"github.com/Svarcf/sever_go/internal/models"
)

// CreateToolRepairRecord is the resolver for the createToolRepairRecord field.
func (r *mutationResolver) CreateToolRepairRecord(ctx context.Context, createToolRepairRecordInput *model.CreateToolRepairRecordInput) (*models.ToolRepairRecord, error) {
	panic(fmt.Errorf("not implemented: CreateToolRepairRecord - createToolRepairRecord"))
}

// ToolRepairRecords is the resolver for the toolRepairRecords field.
func (r *queryResolver) ToolRepairRecords(ctx context.Context) ([]*models.ToolRepairRecord, error) {
	panic(fmt.Errorf("not implemented: ToolRepairRecords - toolRepairRecords"))
}

// ToolRepairRecord is the resolver for the toolRepairRecord field.
func (r *queryResolver) ToolRepairRecord(ctx context.Context, id uint) (*models.ToolRepairRecord, error) {
	panic(fmt.Errorf("not implemented: ToolRepairRecord - toolRepairRecord"))
}

// DateStarted is the resolver for the dateStarted field.
func (r *toolRepairRecordResolver) DateStarted(ctx context.Context, obj *models.ToolRepairRecord) (*string, error) {
	panic(fmt.Errorf("not implemented: DateStarted - dateStarted"))
}

// DateEnded is the resolver for the dateEnded field.
func (r *toolRepairRecordResolver) DateEnded(ctx context.Context, obj *models.ToolRepairRecord) (*string, error) {
	panic(fmt.Errorf("not implemented: DateEnded - dateEnded"))
}

// DeadlineDate is the resolver for the deadlineDate field.
func (r *toolRepairRecordResolver) DeadlineDate(ctx context.Context, obj *models.ToolRepairRecord) (*string, error) {
	panic(fmt.Errorf("not implemented: DeadlineDate - deadlineDate"))
}

// TimeSpent is the resolver for the timeSpent field.
func (r *toolRepairRecordResolver) TimeSpent(ctx context.Context, obj *models.ToolRepairRecord) (*string, error) {
	panic(fmt.Errorf("not implemented: TimeSpent - timeSpent"))
}

// User is the resolver for the user field.
func (r *toolRepairRecordResolver) User(ctx context.Context, obj *models.ToolRepairRecord) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// ToolRepairRecord returns ToolRepairRecordResolver implementation.
func (r *Resolver) ToolRepairRecord() ToolRepairRecordResolver { return &toolRepairRecordResolver{r} }

type toolRepairRecordResolver struct{ *Resolver }
